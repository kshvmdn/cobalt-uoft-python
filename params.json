{
  "name": "Cobalt UofT (Python)",
  "tagline": "A Python wrapper for the Cobalt API.",
  "body": "## cobaltuoft [![PyPI version](https://badge.fury.io/py/cobaltuoft.svg)](https://badge.fury.io/py/cobaltuoft)\r\n\r\nA Python wrapper for interfacing with [Cobalt](http://github.com/cobalt-uoft), open data [APIs](http://cobalt.qas.im) and [datasets](http://github.com/cobalt-uoft/datasets) for the University of Toronto.\r\n\r\n### Documentation\r\n\r\n- [Getting started](#getting-started)\r\n- [Usage](#usage)\r\n- [Examples](#examples)\r\n- [Contribute](#contribute)\r\n\r\n--- \r\n\r\n### Getting started\r\n\r\n#### Installation\r\n\r\n1. Install through `pip`\r\n\r\n  ```\r\n  pip install cobaltuoft\r\n  ```\r\n\r\n2. Install via source\r\n\r\n  ```sh\r\n  $ git clone https://github.com/kshvmdn/cobalt-uoft-python.git\r\n  # Or download from here - https://github.com/kshvmdn/cobalt-uoft-python/archive/master.zip\r\n  $ cd cobalt-uoft-python && pip install -r ./requirements.txt\r\n  ```\r\n\r\n---\r\n\r\n### Usage\r\n\r\n#### Classes\r\n\r\n  - Request objects\r\n    + [Cobalt](#cobaltuoftcobalt)\r\n    + [Datasets](#cobaltuoftdatasets)\r\n  \r\n  - Response objects\r\n    + [Response](#cobaltuoftresponseresponse)\r\n\r\n#### API\r\n\r\n##### `cobaltuoft.Cobalt`\r\n  \r\n  - Directly interface with [Cobalt](http://cobalt.qas.im) APIs. Data is returned as a [`Response`](#cobaltuoftresponseresponse) object.\r\n\r\n  - Initialize the class (a Cobalt API key is required, get one [here](https://cobalt.qas.im/signup)).\r\n\r\n    ```py\r\n    >>> from cobaltuoft import Cobalt\r\n    >>> cobalt = Cobalt(api_key='API_KEY')\r\n    ```\r\n\r\n  - Each [active API](https://cobalt.qas.im/#apis) can be accessed through a method of the same name. These methods have two optional parameters:\r\n\r\n    + `endpoint` –  The endpoint to be accessed for the respective API. Any of the following values are accepted (for most of the APIs, refer to the docs for exceptions):\r\n\r\n      - [`list`](https://cobalt.qas.im/documentation/courses/list) (default)\r\n      - [`show`](https://cobalt.qas.im/documentation/courses/show)\r\n      - [`search`](https://cobalt.qas.im/documentation/courses/search)\r\n      - [`filter`](https://cobalt.qas.im/documentation/courses/filter)\r\n\r\n    + `params` – The URL parameters for this query. Accepts a `dict` of key-value pairs. Any of the following keys are accepted (read more about these parameters [here](https://cobalt.qas.im/documentation/courses/search)):\r\n\r\n      | Parameter   | Endpoints            | Description\r\n      | ---         | ---                  | ---\r\n      | `limit`     | All except `show`    | The number of results to return.\r\n      | `skip`      | All except `show`    | The number of results to skip.\r\n      | `sort`      | All except `show`    | The sorting procedure to be used on the returned list.\r\n      | `q`         | `search` or `filter` | The search or filter query. For filter queries, refer to [this](#filter-queries).\r\n      | `id`/`date` | `show`               | The `:id` or `:date` value.\r\n\r\n  - <a name=\"filter-queries\"/>Filter Queries</a>\r\n    * When using `filter`, the `q` parameter can either be a [Cobalt-filter string](https://cobalt.qas.im/documentation/courses/filter) or a nested list of key-value pairs.\r\n    * Outer lists are joined by `\"AND\"` and inner lists are joined by `\"OR\"`. Use a `tuple` for the key-value pair.\r\n    * You can use [`Cobalt._process_filter`](cobaltuoft/endpoints/__init__.py#L14) to test your filters.\r\n    * Here are some examples:\r\n\r\n      - `'instructor:\"D Liu\" AND level:<=200'`\r\n\r\n        ```python\r\n        >>> [\r\n        ...     [('instructor', '\"D Liu\"')],\r\n        ...     [('level', '<=200')]\r\n        ... ]\r\n        ```\r\n\r\n      - `'breadth:!2 OR code:\"CSC\"'`\r\n\r\n        ```python\r\n        >>> [\r\n        ...    [('breadth', '!2'), ('code', '\"CSC\"')]\r\n        ... ]\r\n        ```\r\n\r\n      - `instructor:\"D Liu\" AND level:<=200 AND 'breadth:!2 OR code:\"CSC\"'`\r\n\r\n        ```python\r\n        >>> [\r\n        ...     [('instructor', '\"D Liu\"')],\r\n        ...     [('level', '<=200')],\r\n        ...     [('breadth', '!2'), ('code', '\"CSC\"')]\r\n        ... ]\r\n        ```\r\n\r\n##### `cobaltuoft.Datasets`\r\n  \r\n  - Interface with full [Cobalt datasets](https://github.com/cobalt-uoft/datasets). Data is returned as a [`Response`](#cobaltuoftresponseresponse) object.\r\n  \r\n  - This class doesn't need to be instantiated, instead call it's methods directly.\r\n  \r\n  - `Datasets.run()`\r\n\r\n    | Parameter  | Type          | Description\r\n    | ---        | ---           | ---\r\n    | `tag`      | `str`         | The [release tag](https://api.github.com/repos/cobalt-uoft/datasets/tags) to request data for. Defaults to `'latest'`.\r\n    | `datasets` | `str|[str]`   | The [datasets](https://api.github.com/repos/cobalt-uoft/datasets/contents?ref={TAG}) to return. Accepts a list of datasets, `'*'` for all, or a single dataset.\r\n  \r\n  - [Examples](./examples)\r\n\r\n##### `cobaltuoft.response.Response`\r\n\r\n  - The response object for each of the request modules.\r\n\r\n  | Attribute  | Type                 | Description\r\n  | ---        | ---                  | ---\r\n  | `data`     | `dict|[dict]|None`   | The response body.\r\n  | `error`    | `dict|None`          | The error message and status code.\r\n  | `url`      | `str`                | The request URL with query parameters.\r\n\r\n---\r\n\r\n### Examples\r\n\r\n- More detailed examples can be found [here](./examples).\r\n\r\n#### `cobaltuoft.Cobalt`\r\n\r\n```py\r\nfrom cobaltuoft import Cobalt\r\ncobalt = Cobalt(api_key='API_KEY')\r\n```\r\n\r\n```py\r\n>>> courses = cobalt.courses(params={'skip': 10})\r\n>>> courses\r\n<class 'cobaltuoft.response.Response'>\r\n>>> courses.error\r\nNone\r\n>>> courses.data\r\n[..., {...}]\r\n>>> courses.url\r\n'http://cobalt.qas.im/api/1.0/courses?skip=10&key={KEY}'\r\n```\r\n\r\n```py\r\n>>> building_134 = cobalt.buildings(endpoint='search', params={'id': 134})\r\n>>> building_134.error\r\nNone\r\n>>> building_134.data\r\n{...} # not a list!\r\n>>> building_134.url\r\n'http://cobalt.qas.im/api/1.0/buildings/134?key={KEY}'\r\n>>> building_1738 = cobalt.buildings(endpoint='search', params={'id': 1738})\r\n>>> building_1738.error\r\n{\r\n    'status_code': 400, \r\n    'message': 'A building with the specified identifier does not exist.'\r\n}\r\n>>> building_1738.data\r\nNone\r\n>>> building_1738.url\r\n'http://cobalt.qas.im/api/1.0/buildings/1738?key={KEY}'\r\n```\r\n\r\n```py\r\n>>> food = cobalt.food(endpoint='search', params={\r\n...     'q': '\"pizza\"',\r\n...     'limit': 2\r\n... })\r\n>>> food.error\r\nNone\r\n>>> food.data\r\n[{...}, {...}]\r\n>>> food.url\r\n'http://cobalt.qas.im/api/1.0/food/search?q=\"pizza\"&limit=2&key={KEY}'\r\n```\r\n\r\n```py\r\n>>> textbooks = cobalt.textbooks(endpoint='filter', params={\r\n...     'q': [\r\n...         [\r\n...             ('price', '>=500'),\r\n...             ('author', '\"Queen\"')\r\n...         ]\r\n...     ] # equivalent to 'q': 'price:>=500 OR author:\"Queen\"'\r\n... })\r\n>>> textbooks.error\r\nNone\r\n>>> textbooks.data\r\n[..., {...}]\r\n>>> textbooks.url\r\n'http://cobalt.qas.im/api/1.0/textbooks/filter?q=price:>=500 OR author=\"Queen\"&key={KEY}'\r\n```\r\n\r\n--- \r\n\r\n#### `cobaltuoft.Datasets`\r\n\r\n```py\r\nfrom cobaltuoft import Datasets\r\n```\r\n\r\n```py\r\n>>> latest_datasets = Datasets.run(tag='latest', datasets='*')\r\n>>> latest_datasets.error\r\nNone # the GitHub API only allows 60 requests per hour, this will be non-None after you hit that limit.\r\n>>> latest_datasets.data\r\n{\r\n    ...,\r\n    'courses': [..., {...}], \r\n    'athletics': [..., {...}]\r\n} \r\n```\r\n\r\n```py\r\n>>> courses_2015 = Datasets.run(tag='2015-2016', datasets='courses')\r\n>>> courses_2015.data\r\n{\r\n    'courses': [..., {...}]\r\n}\r\n>>> courses_2015.url\r\nNone # Datasets responses don't have a `url` attribute!\r\n```\r\n\r\n```py\r\n>>> datasets = Datasets.run(datasets=['athletics', 'shuttles', 'parking', 'libraries'])\r\n>>> import json\r\n>>> with open('datasets.json', 'w') as f:\r\n...     f.write(json.dumps(datasets.data, indent=2))\r\n# https://gist.github.com/kshvmdn/6103bab0ff86fbc904b27c8072a32a2b\r\n```\r\n\r\n\r\n--- \r\n\r\n### Contribute\r\n\r\nThis project is completely open source. Feel free to open an [issue](https://github.com/kshvmdn/cobalt-uoft-python/issues) for questions/requests or submit a [pull request](https://github.com/kshvmdn/cobalt-uoft-python/pulls).\r\n\r\n#### Development\r\n\r\n- Clone the project.\r\n\r\n  ```sh\r\n  git clone https://github.com/kshvmdn/cobalt-uoft-python.git && cd cobalt-uoft-python\r\n  ```\r\n\r\n- Install requirements.\r\n\r\n  ```sh\r\n  pip install -r ./requirements.txt\r\n  ```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}